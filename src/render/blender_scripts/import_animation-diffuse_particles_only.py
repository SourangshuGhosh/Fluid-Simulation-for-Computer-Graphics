"""
    This script will import and render a sequence of .ply diffuse particle meshes
    generated by the PIC/FLIP Fluid Simulation program (https://github.com/rlguy/GridFluidSim3D) 
    in Blender using the Blender Python API.

    The diffuse mesh sequence must be in the form:
       prefix000000.ply, prefix000001.ply, prefix000002.ply, ...
"""

import bpy 
import math

# Change this variable to point towards your bakefiles directory
MESH_FILEPATH_DIRECTORY = "C:\\cygwin64\\home\\Ryan\\fluidsim\\bakefiles\\"

# Prefix of the mesh filename
#
# Example: if filename is diffuse000000.ply, the variable would be
#  DIFFUSE_FILE_NAME_PREFIX = "diffuse"
#
# Leave empty if there is no prefix to the file number
DIFFUSE_FILE_NAME_PREFIX = "diffuse"

# Name of the Blender scene object that will be duplicated over each 
# diffuse particle position
DIFFUSE_PARTICLE_OBJECT_NAME = 'particle'

# replace 'Water' or 'DiffuseParticle' with name of the material you would 
# like to apply to the imported meshes. If the material is not found, the
# mesh will be rendered with the default diffuse material
DIFFUSE_MATERIAL = bpy.data.materials.get('DiffuseParticle')

# Don't change these variables, globals are only used by the script
DIFFUSE_MESH_OBJECT_NAME = "Diffuse Object"

def remove_mesh_from_memory(object_name):
    mesh = bpy.data.meshes[object_name]
    mesh.user_clear()
    bpy.data.meshes.remove(mesh)

def run_before_frame_change(scene):
    bpy.ops.object.select_all(action='DESELECT')

    if not (DIFFUSE_MESH_OBJECT_NAME == "Diffuse Object"):
        obj = bpy.data.objects[DIFFUSE_MESH_OBJECT_NAME]
        bpy.data.scenes[0].objects.unlink(obj)
        bpy.data.objects.remove(obj)
        remove_mesh_from_memory(DIFFUSE_MESH_OBJECT_NAME)

def get_frame_string(framenum):
    lenframe = len(framenum)
    
    framestr = ""
    if lenframe == 1:
        framestr = "00000" + framenum
    if lenframe == 2:
        framestr = "0000" + framenum
    if lenframe == 3:
        framestr = "000" + framenum

    return framestr
  
def smooth_mesh(mesh):
    for p in mesh.data.polygons:
        p.use_smooth = True

def run_after_frame_change(scene):
    scene.cycles.seed = bpy.data.scenes["Scene"].frame_current
    
    cframe = str(bpy.data.scenes["Scene"].frame_current)
    cframe = get_frame_string(cframe)  
        
    # Import Diffuse Particle Mesh
    diffuse_mesh_filename = MESH_FILEPATH_DIRECTORY + DIFFUSE_FILE_NAME_PREFIX + cframe + ".ply"
    bpy.ops.import_mesh.ply(filepath=diffuse_mesh_filename)
    
    global DIFFUSE_MESH_OBJECT_NAME
    DIFFUSE_MESH_OBJECT_NAME = DIFFUSE_FILE_NAME_PREFIX + cframe
    diffuse_mesh = bpy.data.objects[DIFFUSE_MESH_OBJECT_NAME]
    diffuse_mesh.data.materials.append(DIFFUSE_MATERIAL)
    diffuse_mesh.rotation_euler = (0.5*math.pi, 0, 0.5*math.pi)
    diffuse_mesh.draw_type = "BOUNDS"
    
    parent = diffuse_mesh
    child = bpy.data.objects[DIFFUSE_PARTICLE_OBJECT_NAME]
    child.parent = parent
    parent.dupli_type = 'VERTS'
    
    bpy.ops.object.select_all(action='DESELECT')
    print("FINISHED LOADING FRAME: ", cframe)
    
# Handlers
bpy.app.handlers.frame_change_pre.append(run_before_frame_change)
bpy.app.handlers.frame_change_post.append(run_after_frame_change)
