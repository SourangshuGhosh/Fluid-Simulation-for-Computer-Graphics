"""
    This script will import and render a sequence of .ply brick location 
    meshes generated by generated by the PIC/FLIP Fluid Simulation 
    program's (https://github.com/rlguy/GridFluidSim3D) 'LEGO' brick surface 
    reconstruction feature.

    Bricks can be coloured by using the Cycles script node with the 
    brick_texture_lookup_shader.osl shader and a colour lookup texture
    image generated by the brick_texture_packer program.

    The brick mesh sequence must be in the form:
       prefix000000.ply, prefix000001.ply, prefix000002.ply, ...
"""

import bpy
import math

# Change this variable to point towards your bakefiles directory
BRICK_FILEPATH_DIRECTORY = "C:\\cygwin64\\home\\Ryan\\fluidsim\\bakefiles\\"

# Prefix of the mesh filename
#
# Example: if filename is brick000000.ply, the variable would be
#  BRICK_FILE_NAME_PREFIX = "brick"
#
# Leave empty if there is no prefix to the file number
BRICK_FILE_NAME_PREFIX = "brick"

# Name of the Blender scene object that will be duplicated over each 
# brick position
BRICK_MODEL_OBJECT_NAME = "legobrick"

# Don't change this variable, global is only used by the script
BRICK_MESH_OBJECT_NAME = ""

def remove_mesh_from_memory(object_name):
    mesh = bpy.data.meshes[object_name]
    mesh.user_clear()
    bpy.data.meshes.remove(mesh)

def run_before_frame_change(scene):
    bpy.ops.object.select_all(action='DESELECT')
    
    if not (BRICK_MESH_OBJECT_NAME == ""):
        obj = bpy.data.objects[BRICK_MESH_OBJECT_NAME]
        bpy.data.scenes[0].objects.unlink(obj)
        bpy.data.objects.remove(obj)
        remove_mesh_from_memory(BRICK_MESH_OBJECT_NAME)

def get_frame_string(framenum):
    lenframe = len(framenum)
    
    framestr = ""
    if lenframe == 1:
        framestr = "00000" + framenum
    if lenframe == 2:
        framestr = "0000" + framenum
    if lenframe == 3:
        framestr = "000" + framenum

    return framestr
           
def run_after_frame_change(scene):
    scene.cycles.seed = bpy.data.scenes["Scene"].frame_current
    
    cframe = str(bpy.data.scenes["Scene"].frame_current)
    cframe = get_frame_string(cframe)
        
    mesh_filename = BRICK_FILEPATH_DIRECTORY + BRICK_FILE_NAME_PREFIX + cframe + ".ply"
    bpy.ops.import_mesh.ply(filepath=mesh_filename)
    
    global BRICK_MESH_OBJECT_NAME
    BRICK_MESH_OBJECT_NAME = BRICK_FILE_NAME_PREFIX + cframe
    mesh = bpy.data.objects[BRICK_MESH_OBJECT_NAME]
    mesh.rotation_euler = (0.5*math.pi, 0, 0.5*math.pi)
    
    parent = mesh
    child = bpy.data.objects[BRICK_MODEL_OBJECT_NAME]
    child.parent = parent
    parent.dupli_type = 'VERTS'
    
    bpy.ops.object.select_all(action='DESELECT')
    print("FINISHED LOADING FRAME: ", cframe)        
    
#Frame Change / Saving Function Triggers
bpy.app.handlers.frame_change_pre.append(run_before_frame_change)
bpy.app.handlers.frame_change_post.append(run_after_frame_change)
